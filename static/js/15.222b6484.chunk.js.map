{"version":3,"sources":["pages/admin/depositRequest/depositRequest.jsx"],"names":["Container","styled","div","props","theme","colorLight","colorDark","font","large","colorSecondary","colorPrimary","xlarge","medium","connect","user","users","regionContext","useContext","ContextData","useState","showPopUpMessage","setShowPopUpMessage","popUpMessage","setPopUpMessage","isLoading","setIsLoading","error","setError","refrenceId","setRefrenceId","isModalActive","setIsModalActive","paymentOptions","setPaymentOptions","process","bitcoinAddress","amountInput","setAmountInput","state","amount","copy","type","a","navigator","clipboard","writeText","isActive","className","role","aria-label","onClick","src","qrcode","alt","buttonClass","buttonText","classname","wrapperClass","data","rules","required","minlength","submit","e","length","auth_token","Storage","get","userId","id","email","status","object","paymentMethod","Axios","post","routes","api","usersDeposit","then","res","catch","setTimeout","name","updatedValue","value","placeHolder","icon","envelope","field","onChange","target","country","paymentMethods","map","item","i","key"],"mappings":"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","file":"static/js/15.222b6484.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react'\r\nimport envelope from \"../../../images/svgIcons/envelope.svg\"\r\n// import { ReactComponent as Icon } from \"../../../images/svgIcons/envelope.svg\"\r\nimport styled from 'styled-components'\r\nimport { StyledInput } from '../../../components/styledComponents'\r\n// import Button from '../../../components/button/button'\r\nimport Axios from 'axios'\r\nimport { connect } from 'react-redux'\r\nimport routes from '../../../navigation/routes'\r\nimport { PopUpMessage, Modal, Storage } from '../../../components'\r\nimport qrcode from \"../../../images/qrcode.png\"\r\nimport { FormValidator } from '../../../formValidator'\r\nimport { ValidationMessage } from '../../../validationMessage'\r\nimport { ContextData } from '../../../context/contextData'\r\n\r\n\r\nconst Container = styled.div`\r\n    grid-column: 2/-1;\r\n    display: grid;\r\n    /* grid-template-columns: 1fr; */\r\n    min-height: 100%;\r\n    min-width: 100%;\r\n    /* place-items: center; */\r\n    justify-items: center;\r\n    align-items: flex-start;\r\n    background: ${props => props.theme.colorLight};\r\n    border-radius: 2rem 0 0 2rem;\r\n    z-index: 30;\r\n    position: relative;\r\n    .modal__container{\r\n        place-items: center;\r\n        background: ${props => props.theme.colorLight};\r\n        padding: 2rem 3rem;\r\n        height: max-content;\r\n        align-self: center;\r\n        color: ${props => props.theme.colorDark};\r\n        text-align: center;\r\n        position: relative;\r\n        border-radius: 1rem;\r\n        display: grid;\r\n\r\n        .close{\r\n            justify-self: flex-end;\r\n            cursor: pointer;\r\n        }\r\n        img{\r\n            height: 20rem;\r\n            width: 20rem;\r\n        }\r\n        &--text{\r\n            padding: 1rem;\r\n        }\r\n        &-address{\r\n            font-size: ${props => props.theme.font.large};\r\n            color: ${props => props.theme.colorSecondary};\r\n        }\r\n    }\r\n    .title{   \r\n        justify-self: flex-start;\r\n        font-weight: 500;\r\n        color: ${props => props.theme.colorPrimary};\r\n        font-family: ProximaNovaSoftW03-Regular;\r\n        position: relative;\r\n        margin-top: 8rem;\r\n        &::after{\r\n          content: '';\r\n          position: absolute;\r\n          width: 120%;\r\n          height: .4rem;\r\n          bottom: 0;\r\n          left: 0;\r\n          background: ${props => props.theme.colorPrimary};\r\n        }\r\n      }\r\n    .deposit{\r\n        display: grid;\r\n        /* margin-top: 13rem; */\r\n        padding: 2rem ;\r\n        /* display: flex; */\r\n        align-self: center;\r\n        justify-items: center;\r\n        color: ${props => props.theme.colorDark};\r\n        /* height: 1rem; */\r\n        box-shadow: .2rem .4rem 10px rgba(0,0,0, .3),\r\n            -0.2rem -0.4rem 20px rgba(255,255,255, .3);\r\n        \r\n        &-header{\r\n            font-weight: 600;\r\n            font-size: ${props => props.theme.font.xlarge};\r\n            color: ${props => props.theme.colorPrimary};\r\n            justify-self: flex-start;\r\n            padding: 2rem;\r\n        }\r\n        &-form{\r\n            display: grid;\r\n            width: 90%;\r\n            justify-items: center;\r\n            \r\n            &__wrapper{\r\n                justify-items: initial;\r\n            }\r\n        }\r\n        .paymentOptions{\r\n            padding: 1rem 2rem;\r\n                margin: 1rem;\r\n                box-shadow: -0.2rem -0.4rem 20px rgba(255,255,255, .3),\r\n                    .2rem .4rem 10px rgba(0,0,0, .3);\r\n                background: none;\r\n                border-radius: .4rem;  \r\n                border: none;  \r\n                font-size: ${props => props.theme.font.medium};\r\n                color: ${props => props.theme.colorSecondary};\r\n                /* &:hover{\r\n                } */\r\n                &:focus{\r\n                    outline: none;\r\n                    /* color: ${props => props.theme.colorSecondary}; */\r\n                }\r\n        }\r\n        .summit{\r\n            margin: 0 2rem;\r\n        }\r\n    }\r\n`\r\nfunction DepositRequest(props) {\r\n    const regionContext = useContext(ContextData)\r\n    // const [depositValue, setDepositValue] = useState(\"\")\r\n    const [showPopUpMessage, setShowPopUpMessage] = useState(false)\r\n    const [popUpMessage, setPopUpMessage] = useState(null)\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(false)\r\n    const [refrenceId, setRefrenceId] = useState(\"\")\r\n\r\n    const [isModalActive, setIsModalActive] = useState(false)\r\n    const [paymentOptions, setPaymentOptions] = useState('bank')\r\n    const [bitcoinAddress] = useState(process.env.REACT_APP_WALLET_ADDRESS)\r\n    const [amountInput, setAmountInput] = useState('bank')\r\n\r\n    // const updateFormValue = (name, value) => {\r\n    //     setDepositValue(value)\r\n    // }\r\n    const state = {\r\n        amount: amountInput,\r\n        paymentOptions: paymentOptions\r\n        // newPassword: \"\",\r\n        // slug: slug,\r\n    }\r\n    const modalRule = {\r\n        amount: { required: true, minlength: 2 },\r\n        // paymentOptions: { required: true },\r\n    }\r\n    async function copy(type) {\r\n        if (type === \"refId\") {\r\n            navigator.clipboard.writeText(refrenceId)\r\n            return\r\n        }\r\n        navigator.clipboard.writeText(bitcoinAddress)\r\n    }\r\n    const handleSubmit = (e) => {\r\n        if (state?.amount.length < 1) {\r\n            console.log(\"short\");\r\n\r\n            setError(!false)\r\n            setPopUpMessage(\"Must be at least 2 digits\")\r\n            setShowPopUpMessage(true)\r\n            return\r\n        }\r\n        setError(false)\r\n        const auth_token = Storage.get(\"userInfo\").user.auth_token\r\n        const userId = Storage.get(\"userInfo\").user.id\r\n        const email = Storage.get(\"userInfo\").user.email\r\n        const status = Storage.get(\"userInfo\").user.status\r\n        setIsLoading(true)\r\n        const object = {\r\n            id: userId,\r\n            paymentMethod: paymentOptions,\r\n            email: email,\r\n            amount: +state?.amount\r\n        }\r\n        console.log(object);\r\n        if (status === \"verified\") {\r\n            Axios.post(`${routes.api.usersDeposit}?token=${auth_token}`, object)\r\n                .then(res => {\r\n                    setShowPopUpMessage(false)\r\n                    if (res.data.status === \"success\") {\r\n                        setPopUpMessage(res.data.data[0])\r\n                        setRefrenceId(res.data.data[1])\r\n                        setShowPopUpMessage(true)\r\n                        setIsLoading(!true)\r\n                        setIsModalActive(true)\r\n                        // setTimeout(() => {\r\n                        //     props.history.push(routes.admin.index)\r\n                        // }, 8000);\r\n                        return\r\n                    }\r\n\r\n                })\r\n                .catch(res => {\r\n                    setPopUpMessage(\"An error occurred please try again or contact customer support\")\r\n                    setError(true)\r\n                    setShowPopUpMessage(true)\r\n                    setIsLoading(!true)\r\n                })\r\n        } else {\r\n            setError(!false)\r\n            setPopUpMessage(\"You are unverified. Click on the verify link on the menu to verify your account and continue\")\r\n            setShowPopUpMessage(true)\r\n            setTimeout(() => {\r\n                setError(false)\r\n                setShowPopUpMessage(false)\r\n                setIsLoading(!true)\r\n            }, 8500)\r\n\r\n        }\r\n    }\r\n    // const updateAmountValue = (name, value) => {\r\n    //     state[name] = value\r\n    //     console.log(state);\r\n    // }\r\n    \r\n    // let createImage = (file) => {\r\n    //     let reader = new FileReader();\r\n    //     reader.onload = (e) => {\r\n    //         return e.target.result\r\n    //     };\r\n    //     reader.readAsDataURL(file);\r\n    // }\r\n    return (\r\n        <Container>\r\n            <Modal isActive={isModalActive}>\r\n                <div className=\"modal__container\">\r\n                    <span role=\"img\" aria-label=\"img\" className=\"close\" onClick={() => setIsModalActive(false)}>\r\n                        ❌\r\n\r\n                        </span>\r\n                    <img src={qrcode} alt=\"\" />\r\n\r\n                    <p className=\"modal__container--text\">\r\n                        please pay exactly ${state.amount} into this bitcoin address\r\n                    </p>\r\n\r\n                    <p className=\"modal__container-address\">\r\n                        {bitcoinAddress}\r\n                        <button onClick={() => copy()}> copy</button>\r\n                    </p>\r\n                    <p className=\"modal__container--text\">\r\n                        After successful payment contact customer care with the refrence Id below and prof of confirmation.\r\n\r\n                        <span className=\"modal__container-address\">\r\n                            {refrenceId}\r\n                            <button onClick={() => copy(\"refId\")}> copy</button>\r\n                        </span>\r\n                        {/* <button onClick={() =>copy()}> copy</button> */}\r\n\r\n                    </p>\r\n                </div>\r\n            </Modal>\r\n            {/* <h1 className=\"title\">Deposit Requests</h1> */}\r\n            {showPopUpMessage ? <PopUpMessage error={error}> {popUpMessage} <span onClick={() => setShowPopUpMessage(false)}>✖</span> </PopUpMessage> : null}\r\n            <div className=\"deposit\">\r\n                <h3 className=\"deposit-header\">\r\n                    Deposit Form:\r\n                </h3>\r\n                <p className=\"deposit-text\">\r\n                    Enter your amount to deposit and payment method.\r\n\t\t\t\t</p>\r\n                <FormValidator buttonClass=\"summit\"\r\n                    buttonText={isLoading ? \"Loading...\" : \"Submit\"}\r\n                    classname=\"deposit-form\"\r\n                    wrapperClass=\"deposit-form__wrapper\"\r\n                    data={state} rules={modalRule}\r\n                    submit={handleSubmit}>\r\n                    <div className=\"\">\r\n\r\n                        {/* <StyledInput name=\"deposit\" label=\"\" updatedValue={setDepositValue}\r\n                            handleChange={updateFormValue} value={depositValue}\r\n                            placeHolder=\"Enter amount to Deposit\" type=\"number\" icon={envelope} /> */}\r\n\r\n                        {/* <br /> */}\r\n                        <StyledInput name=\"amount\" updatedValue={setAmountInput}\r\n                            value={state.amount}\r\n                            placeHolder=\"Enter amount to Deposit\" type=\"number\" icon={envelope} />\r\n                        <ValidationMessage field=\"amount\" />\r\n\r\n                        <select className=\"paymentOptions\" value={paymentOptions} onChange={(e) => setPaymentOptions(e.target.value)} name=\"paymentOptions\">\r\n                            {\r\n                                <>\r\n                                    <option value={\"bank\"}>\r\n                                        Bank transfer\r\n                                    </option>\r\n                                    {\r\n                                        regionContext?.country?.paymentMethods?.map((item, i) => (\r\n                                            <option key={i} value={item.name}>\r\n                                                {item.name}\r\n                                            </option>\r\n                                        ))\r\n                                    }\r\n                                </>\r\n                            }\r\n                        </select>\r\n                        <ValidationMessage field=\"paymentOptions\" />\r\n                    </div>\r\n\r\n                </FormValidator>\r\n                {/* <Button className=\"summit\" onClick={handleSubmit}>\r\n                    {isLoading ? \"Loading...\" : \"Request\"}\r\n                </Button> */}\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = ({ users }) => ({\r\n    user: users\r\n})\r\n\r\nexport default connect(mapStateToProps)(DepositRequest)"],"sourceRoot":""}